{"ast":null,"code":"import { idArg, queryType, stringArg } from 'nexus';\nimport { getUserId } from '../utils';\nconst Query = queryType({\n  definition(t) {\n    t.field('me', {\n      type: 'User',\n      nullable: true,\n      resolve: (parent, args, ctx) => {\n        const userId = getUserId(ctx);\n        return ctx.photon.users.findOne({\n          where: {\n            id: userId\n          }\n        });\n      }\n    });\n    t.list.field('feed', {\n      type: 'Post',\n      resolve: (parent, args, ctx) => {\n        return ctx.photon.posts.findMany({\n          where: {\n            published: true\n          }\n        });\n      }\n    });\n    t.list.field('filterPosts', {\n      type: 'Post',\n      args: {\n        searchString: stringArg({\n          nullable: true\n        })\n      },\n      resolve: (parent, {\n        searchString\n      }, ctx) => {\n        return ctx.photon.posts.findMany({\n          where: {\n            OR: [{\n              title: {\n                contains: searchString\n              }\n            }, {\n              content: {\n                contains: searchString\n              }\n            }]\n          }\n        });\n      }\n    });\n    t.field('post', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        id: idArg()\n      },\n      resolve: (parent, {\n        id\n      }, ctx) => {\n        return ctx.photon.posts.findOne({\n          where: {\n            id\n          }\n        });\n      }\n    });\n  }\n\n});\nexport default Query;","map":{"version":3,"sources":["/Users/danielkov/projects/DevStarter/prisma/types/Query.ts"],"names":["idArg","queryType","stringArg","getUserId","Query","definition","t","field","type","nullable","resolve","parent","args","ctx","userId","photon","users","findOne","where","id","list","posts","findMany","published","searchString","OR","title","contains","content"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,MAAMC,KAAK,GAAGH,SAAS,CAAC;AACtBI,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,KAAF,CAAQ,IAAR,EAAc;AACZC,MAAAA,IAAI,EAAE,MADM;AAEZC,MAAAA,QAAQ,EAAE,IAFE;AAGZC,MAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,IAAT,EAAeC,GAAf,KAAuB;AAC9B,cAAMC,MAAM,GAAGX,SAAS,CAACU,GAAD,CAAxB;AACA,eAAOA,GAAG,CAACE,MAAJ,CAAWC,KAAX,CAAiBC,OAAjB,CAAyB;AAC9BC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAEL;AADC;AADuB,SAAzB,CAAP;AAKD;AAVW,KAAd;AAaAR,IAAAA,CAAC,CAACc,IAAF,CAAOb,KAAP,CAAa,MAAb,EAAqB;AACnBC,MAAAA,IAAI,EAAE,MADa;AAEnBE,MAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,IAAT,EAAeC,GAAf,KAAuB;AAC9B,eAAOA,GAAG,CAACE,MAAJ,CAAWM,KAAX,CAAiBC,QAAjB,CAA0B;AAC/BJ,UAAAA,KAAK,EAAE;AAAEK,YAAAA,SAAS,EAAE;AAAb;AADwB,SAA1B,CAAP;AAGD;AANkB,KAArB;AASAjB,IAAAA,CAAC,CAACc,IAAF,CAAOb,KAAP,CAAa,aAAb,EAA4B;AAC1BC,MAAAA,IAAI,EAAE,MADoB;AAE1BI,MAAAA,IAAI,EAAE;AACJY,QAAAA,YAAY,EAAEtB,SAAS,CAAC;AAAEO,UAAAA,QAAQ,EAAE;AAAZ,SAAD;AADnB,OAFoB;AAK1BC,MAAAA,OAAO,EAAE,CAACC,MAAD,EAAS;AAAEa,QAAAA;AAAF,OAAT,EAA2BX,GAA3B,KAAmC;AAC1C,eAAOA,GAAG,CAACE,MAAJ,CAAWM,KAAX,CAAiBC,QAAjB,CAA0B;AAC/BJ,UAAAA,KAAK,EAAE;AACLO,YAAAA,EAAE,EAAE,CACF;AACEC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,QAAQ,EAAEH;AADL;AADT,aADE,EAMF;AACEI,cAAAA,OAAO,EAAE;AACPD,gBAAAA,QAAQ,EAAEH;AADH;AADX,aANE;AADC;AADwB,SAA1B,CAAP;AAgBD;AAtByB,KAA5B;AAyBAlB,IAAAA,CAAC,CAACC,KAAF,CAAQ,MAAR,EAAgB;AACdC,MAAAA,IAAI,EAAE,MADQ;AAEdC,MAAAA,QAAQ,EAAE,IAFI;AAGdG,MAAAA,IAAI,EAAE;AAAEO,QAAAA,EAAE,EAAEnB,KAAK;AAAX,OAHQ;AAIdU,MAAAA,OAAO,EAAE,CAACC,MAAD,EAAS;AAAEQ,QAAAA;AAAF,OAAT,EAAiBN,GAAjB,KAAyB;AAChC,eAAOA,GAAG,CAACE,MAAJ,CAAWM,KAAX,CAAiBJ,OAAjB,CAAyB;AAC9BC,UAAAA,KAAK,EAAE;AACLC,YAAAA;AADK;AADuB,SAAzB,CAAP;AAKD;AAVa,KAAhB;AAYD;;AA7DqB,CAAD,CAAvB;AAgEA,eAAef,KAAf","sourcesContent":["import { idArg, queryType, stringArg } from 'nexus';\nimport { getUserId } from '../utils';\n\nconst Query = queryType({\n  definition(t) {\n    t.field('me', {\n      type: 'User',\n      nullable: true,\n      resolve: (parent, args, ctx) => {\n        const userId = getUserId(ctx);\n        return ctx.photon.users.findOne({\n          where: {\n            id: userId,\n          },\n        });\n      },\n    });\n\n    t.list.field('feed', {\n      type: 'Post',\n      resolve: (parent, args, ctx) => {\n        return ctx.photon.posts.findMany({\n          where: { published: true },\n        });\n      },\n    });\n\n    t.list.field('filterPosts', {\n      type: 'Post',\n      args: {\n        searchString: stringArg({ nullable: true }),\n      },\n      resolve: (parent, { searchString }, ctx) => {\n        return ctx.photon.posts.findMany({\n          where: {\n            OR: [\n              {\n                title: {\n                  contains: searchString,\n                },\n              },\n              {\n                content: {\n                  contains: searchString,\n                },\n              },\n            ],\n          },\n        });\n      },\n    });\n\n    t.field('post', {\n      type: 'Post',\n      nullable: true,\n      args: { id: idArg() },\n      resolve: (parent, { id }, ctx) => {\n        return ctx.photon.posts.findOne({\n          where: {\n            id,\n          },\n        });\n      },\n    });\n  },\n});\n\nexport default Query;\n"]},"metadata":{},"sourceType":"module"}