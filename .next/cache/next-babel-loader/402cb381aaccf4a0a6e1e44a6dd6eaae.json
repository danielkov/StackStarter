{"ast":null,"code":"import { compare, hash } from 'bcryptjs';\nimport { sign } from 'jsonwebtoken';\nimport { idArg, mutationType, stringArg } from 'nexus';\nimport { APP_SECRET, getUserId } from '../utils';\nexport const Mutation = mutationType({\n  definition(t) {\n    t.field('signup', {\n      type: 'AuthPayload',\n      args: {\n        name: stringArg(),\n        email: stringArg({\n          nullable: false\n        }),\n        password: stringArg({\n          nullable: false\n        })\n      },\n      resolve: async (_parent, {\n        name,\n        email,\n        password\n      }, ctx) => {\n        const hashedPassword = await hash(password, 10);\n        const user = await ctx.photon.users.create({\n          data: {\n            name,\n            email,\n            password: hashedPassword\n          }\n        });\n        return {\n          token: sign({\n            userId: user.id\n          }, APP_SECRET),\n          user\n        };\n      }\n    });\n    t.field('login', {\n      type: 'AuthPayload',\n      args: {\n        email: stringArg({\n          nullable: false\n        }),\n        password: stringArg({\n          nullable: false\n        })\n      },\n      resolve: async (_parent, {\n        email,\n        password\n      }, context) => {\n        const user = await context.photon.users.findOne({\n          where: {\n            email\n          }\n        });\n\n        if (!user) {\n          throw new Error(`No user found for email: ${email}`);\n        }\n\n        const passwordValid = await compare(password, user.password);\n\n        if (!passwordValid) {\n          throw new Error('Invalid password');\n        }\n\n        return {\n          token: sign({\n            userId: user.id\n          }, APP_SECRET),\n          user\n        };\n      }\n    });\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({\n          nullable: false\n        }),\n        content: stringArg()\n      },\n      resolve: (parent, {\n        title,\n        content\n      }, ctx) => {\n        const userId = getUserId(ctx);\n        return ctx.photon.posts.create({\n          data: {\n            title,\n            content,\n            published: false,\n            author: {\n              connect: {\n                id: userId\n              }\n            }\n          }\n        });\n      }\n    });\n    t.field('deletePost', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        id: idArg()\n      },\n      resolve: (parent, {\n        id\n      }, ctx) => {\n        return ctx.photon.posts.delete({\n          where: {\n            id\n          }\n        });\n      }\n    });\n    t.field('publish', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        id: idArg()\n      },\n      resolve: (parent, {\n        id\n      }, ctx) => {\n        return ctx.photon.posts.update({\n          where: {\n            id\n          },\n          data: {\n            published: true\n          }\n        });\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["/Users/danielkov/projects/DevStarter/prisma/types/Mutation.ts"],"names":["compare","hash","sign","idArg","mutationType","stringArg","APP_SECRET","getUserId","Mutation","definition","t","field","type","args","name","email","nullable","password","resolve","_parent","ctx","hashedPassword","user","photon","users","create","data","token","userId","id","context","findOne","where","Error","passwordValid","title","content","parent","posts","published","author","connect","delete","update"],"mappings":"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","sourcesContent":["import { compare, hash } from 'bcryptjs'\nimport { sign } from 'jsonwebtoken'\nimport { idArg, mutationType, stringArg } from 'nexus'\nimport { APP_SECRET, getUserId } from '../utils'\n\nexport const Mutation = mutationType({\n  definition(t) {\n    t.field('signup', {\n      type: 'AuthPayload',\n      args: {\n        name: stringArg(),\n        email: stringArg({ nullable: false }),\n        password: stringArg({ nullable: false }),\n      },\n      resolve: async (_parent, { name, email, password }, ctx) => {\n        const hashedPassword = await hash(password, 10)\n        const user = await ctx.photon.users.create({\n          data: {\n            name,\n            email,\n            password: hashedPassword,\n          },\n        })\n        return {\n          token: sign({ userId: user.id }, APP_SECRET),\n          user,\n        }\n      },\n    })\n\n    t.field('login', {\n      type: 'AuthPayload',\n      args: {\n        email: stringArg({ nullable: false }),\n        password: stringArg({ nullable: false }),\n      },\n      resolve: async (_parent, { email, password }, context) => {\n        const user = await context.photon.users.findOne({\n          where: {\n            email,\n          },\n        })\n        if (!user) {\n          throw new Error(`No user found for email: ${email}`)\n        }\n        const passwordValid = await compare(password, user.password)\n        if (!passwordValid) {\n          throw new Error('Invalid password')\n        }\n        return {\n          token: sign({ userId: user.id }, APP_SECRET),\n          user,\n        }\n      },\n    })\n\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({ nullable: false }),\n        content: stringArg(),\n      },\n      resolve: (parent, { title, content }, ctx) => {\n        const userId = getUserId(ctx)\n        return ctx.photon.posts.create({\n          data: {\n            title,\n            content,\n            published: false,\n            author: { connect: { id: userId } },\n          },\n        })\n      },\n    })\n\n    t.field('deletePost', {\n      type: 'Post',\n      nullable: true,\n      args: { id: idArg() },\n      resolve: (parent, { id }, ctx) => {\n        return ctx.photon.posts.delete({\n          where: {\n            id,\n          },\n        })\n      },\n    })\n\n    t.field('publish', {\n      type: 'Post',\n      nullable: true,\n      args: { id: idArg() },\n      resolve: (parent, { id }, ctx) => {\n        return ctx.photon.posts.update({\n          where: { id },\n          data: { published: true },\n        })\n      },\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}