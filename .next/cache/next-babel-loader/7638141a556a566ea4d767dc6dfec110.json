{"ast":null,"code":"import { rule, shield } from 'graphql-shield';\nimport { getUserId } from '../utils';\nconst rules = {\n  isAuthenticatedUser: rule()((parent, args, context) => {\n    const userId = getUserId(context);\n    return Boolean(userId);\n  }),\n  isPostOwner: rule()(async (parent, {\n    id\n  }, context) => {\n    const userId = getUserId(context);\n    const author = await context.photon.posts.findOne({\n      where: {\n        id\n      }\n    }).author();\n    return userId === author.id;\n  })\n};\nconst permissions = shield({\n  Query: {\n    me: rules.isAuthenticatedUser,\n    filterPosts: rules.isAuthenticatedUser,\n    post: rules.isAuthenticatedUser\n  },\n  Mutation: {\n    createDraft: rules.isAuthenticatedUser,\n    deletePost: rules.isPostOwner,\n    publish: rules.isPostOwner\n  }\n});\nexport default permissions;","map":{"version":3,"sources":["/Users/danielkov/projects/DevStarter/prisma/permissions/index.ts"],"names":["rule","shield","getUserId","rules","isAuthenticatedUser","parent","args","context","userId","Boolean","isPostOwner","id","author","photon","posts","findOne","where","permissions","Query","me","filterPosts","post","Mutation","createDraft","deletePost","publish"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,gBAA7B;AAEA,SAASC,SAAT,QAA0B,UAA1B;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,mBAAmB,EAAEJ,IAAI,GAAG,CAACK,MAAD,EAASC,IAAT,EAAeC,OAAf,KAA2B;AACrD,UAAMC,MAAM,GAAGN,SAAS,CAACK,OAAD,CAAxB;AACA,WAAOE,OAAO,CAACD,MAAD,CAAd;AACD,GAHwB,CADb;AAKZE,EAAAA,WAAW,EAAEV,IAAI,GAAG,OAAOK,MAAP,EAAe;AAAEM,IAAAA;AAAF,GAAf,EAAuBJ,OAAvB,KAAmC;AACrD,UAAMC,MAAM,GAAGN,SAAS,CAACK,OAAD,CAAxB;AACA,UAAMK,MAAM,GAAG,MAAML,OAAO,CAACM,MAAR,CAAeC,KAAf,CAClBC,OADkB,CACV;AACPC,MAAAA,KAAK,EAAE;AACLL,QAAAA;AADK;AADA,KADU,EAMlBC,MANkB,EAArB;AAOA,WAAOJ,MAAM,KAAKI,MAAM,CAACD,EAAzB;AACD,GAVgB;AALL,CAAd;AAkBA,MAAMM,WAAW,GAAGhB,MAAM,CAAC;AACzBiB,EAAAA,KAAK,EAAE;AACLC,IAAAA,EAAE,EAAEhB,KAAK,CAACC,mBADL;AAELgB,IAAAA,WAAW,EAAEjB,KAAK,CAACC,mBAFd;AAGLiB,IAAAA,IAAI,EAAElB,KAAK,CAACC;AAHP,GADkB;AAMzBkB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAEpB,KAAK,CAACC,mBADX;AAERoB,IAAAA,UAAU,EAAErB,KAAK,CAACO,WAFV;AAGRe,IAAAA,OAAO,EAAEtB,KAAK,CAACO;AAHP;AANe,CAAD,CAA1B;AAaA,eAAeO,WAAf","sourcesContent":["import { rule, shield } from 'graphql-shield';\n\nimport { getUserId } from '../utils';\n\nconst rules = {\n  isAuthenticatedUser: rule()((parent, args, context) => {\n    const userId = getUserId(context);\n    return Boolean(userId);\n  }),\n  isPostOwner: rule()(async (parent, { id }, context) => {\n    const userId = getUserId(context);\n    const author = await context.photon.posts\n      .findOne({\n        where: {\n          id,\n        },\n      })\n      .author();\n    return userId === author.id;\n  }),\n};\n\nconst permissions = shield({\n  Query: {\n    me: rules.isAuthenticatedUser,\n    filterPosts: rules.isAuthenticatedUser,\n    post: rules.isAuthenticatedUser,\n  },\n  Mutation: {\n    createDraft: rules.isAuthenticatedUser,\n    deletePost: rules.isPostOwner,\n    publish: rules.isPostOwner,\n  },\n});\n\nexport default permissions;\n"]},"metadata":{},"sourceType":"module"}